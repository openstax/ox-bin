#!/usr/bin/env bash

# todo - make this better by reading current script location
install_location="$HOME/.ox-bin"

usage() {
  tab=$'\t'

  cat <<HELP
usage:
ox [command]

Commands:
HELP

  commands=$(cat <<HELP
  help${tab}prints this
  register${tab}adds links for bin/ files
  deregister${tab}removes links for bin/ files
  uninstall${tab}deregister and remove all files
  update${tab}self-update ox-bin
HELP
)
  for file in "$install_location"/lib/*; do
    filename=$(basename "$file")
    description=$(grep -C 1 "### $filename" "$install_location/README.md" | tail -n1)
    commands+=$'\n  '$filename$tab$description
  done

  column -t -s"$tab" <(echo "$commands")
  exit 1
}

cmd="$1"
shift

case "$cmd" in
  help)
    usage
    ;;
  register)
    "$install_location"/bin/ox deregister
    for file in "$install_location"/bin/*; do
      filename=$(basename "$file")
      ln -s "$file" "/usr/local/bin/$filename"
    done
    ;;
  deregister)
    for file in "$install_location"/bin/*; do
      filename=$(basename "$file")
      rm -f "/usr/local/bin/$filename"
    done
    ;;
  uninstall)
    "$install_location"/bin/ox deregister
    rm -fr "$install_location"
    ;;
  update)
    "$install_location"/bin/ox deregister
    # todo - error messaging
    cd "$install_location" || exit 1;
    git pull
    # todo - this will generate an error if user
    # doesn't have access to repo, handle gracefully
    git submodule update --init --recursive
    "$install_location"/bin/ox register
    ;;
  set_aws_creds)
    source "$install_location/lib/set_aws_creds"
    ;;
  *)
    command_file="$install_location/lib/$cmd"
    if [ ! -f "$command_file" ] || [ ! -x "$command_file" ]; then
      usage
    fi

    "$command_file" "$@"
    ;;
esac
